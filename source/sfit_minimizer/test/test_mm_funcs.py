"""
Tests for the MulensModel functions = direct comparisons to Andy's fortran sfit.
"""
import numpy as np
import os.path
import sfit_minimizer
import MulensModel as mm

"""
# Next Step: 

Clean up comparison tests: 
- rename them so they don't start with "test"
- Fix the comparisons in detail so the properties of SFitFunction are compared 
to the right parts of the Fortran sfit output (e.g., get rid of limb-darkening parameters).

# Thoughts on test data:

Should start by generating two perfect test datasets with only a few (but different numbers of) points each and with 
different values of fs, fb. Then, run through sfit.f to retrieve bmat, dvec, cmat, at several successive steps and then
final values and sigmas.

# Tests:

1. single dataset
2. both datasets
3. fixing fb = 0 for one datasets
4. fixing fs = X for one dataset
5. Different step sizes: fixed, adaptive
6. with parallax
7. One parameter offset, all parameters offset
8. Test results for a dataset with many points.

Remember: Don't over-complicate it. The above is over-complicated.

"""

data_path = os.path.join(sfit_minimizer.DATA_PATH, 'MMTest')

class FortranSFitFile(object):
    """
    Class to parse the comparison file generated by the Fortran version of sfit.
    """

    def __init__(self, filename):
        input_file = open(filename, 'r')
        attr = None
        for line in input_file.readlines():
            str = line.strip().split()
            if str[0] == '#':
                attr = str[-1]
            else:
                if len(str) == 1:
                    value = float(str[0])
                else:
                    print(attr, str)
                    value = np.array([float(item) for item in str])

                self.__setattr__(attr, value)

        input_file.close()


def test_calcs(my_func, sfit_matrix):
    # chi2
    np.assert_almost_equal(np.sum(sfit_matrix.chi2), my_func.chi2)

    # b matrix
    n_elements = int(np.sqrt(len(sfit_matrix.b)))
    shape = (n_elements, n_elements)
    bmat = sfit_matrix.b.reshape(shape)
    np.assert_almost_equal(bmat, my_func.bmat)

    # c matrix
    cmat = sfit_matrix.c.reshape(shape)
    np.assert_almost_equal(cmat, my_func.cmat)

    # d vector
    np.assert_almost_equal(sfit_matrix.d, my_func.dvec)

    # step
    np.assert_almost_equal(sfit_matrix.da, my_func.step)


def test_results(my_func, sfit_result):
    # Values
    np.assert_almost_equal(my_func.theta, sfit_result.a)

    # sigmas
    np.assert_almost_equal(my_func.get_sigmas, sfit_result.s)

def compare_results(datafiles, dir):
    # Get step size from directory name
    str = dir.split('_')
    fac = float(str[-1])

    # Read in SFit results
    sfit_results = FortranSFitFile(
        os.path.join(data_path, 'Matrices', dir, 'fort.60'))
    matrices = []
    for i in range(3):
        matrices.append(
            FortranSFitFile(
                os.path.join(
                    data_path, 'Matrices', dir,  'fort.{0}'.format(50+i+1)) )
        )

    # Initialize SFitFunction
    parameters_to_fit = ['t_0', 'u_0', 't_E']
    initial_guess = matrices[0].a[0:3]  # Wrong initial condition

    datasets = []
    for filename in datafiles:
        print(filename, initial_guess.shape)
        initial_guess = np.hstack((initial_guess, [1.0, 0.0]))
        print(initial_guess.shape)

        data = mm.MulensData(
            file_name=os.path.join(data_path, filename), phot_fmt='mag')
        datasets.append(data)

    model = mm.Model(
        {parameters_to_fit[i]: initial_guess[i] for i in range(3)})
    event = mm.Event(datasets=datasets, model=model)
    event.fit_fluxes()

    my_func = sfit_minimizer.mm_funcs.PSPLFunction(event, parameters_to_fit)

    # Do comparisons
    # first 3 iterations
    new_guess = initial_guess
    for i in range(3):
        my_func.update_all(theta0=new_guess)
        test_calcs(my_func, matrices[i])
        new_guess += my_func.step * fac

    # Final results
    result = sfit_minimizer.minimize(
        my_func, x0=initial_guess, tol=1e-3,
        options={'step': 'adaptive'})
    test_results(my_func, sfit_results)


def test_PSPL_1():
    datafiles = ['PSPL_1_Obs_1.pho', 'PSPL_1_Obs_2.pho']
    for fac in [0.1, 0.01]:
        comparison_dir = 'PSPL_1_{0}'.format(fac)
        print(comparison_dir)
        compare_results(datafiles, comparison_dir)


def test_PSPL_2():
    datafiles = ['PSPL_2_Obs_1.pho']
    for fac in [0.1, 0.01]:
        comparison_dir = 'PSPL_2_{0}'.format(fac)
        print(comparison_dir)
        compare_results(datafiles, comparison_dir)


if __name__ == '__main__':
    test_PSPL_1()